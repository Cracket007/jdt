import os
import pandas as pd
from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.exceptions import TelegramNetworkError
from processing.payd import process_jdt as process_payd_jdt, process_ojdt as process_payd_ojdt
from processing.completed import process_jdt as process_completed_jdt, process_ojdt as process_completed_ojdt
from bot.utils import clean_temp_directory
from config.mappings import DEBIT_MAPPING_COMPLETED, DEBIT_MAPPING_PAYD, CREDIT_MAPPING_PEYD
from config.settings import ADMIN_ID


router = Router()


@router.message(Command("start"))
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å.")

@router.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ (PAYD –∏–ª–∏ COMPLETED)\n"
        "3. –°–æ–∑–¥–∞—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º JDT –∏ OJDT –æ—Ç—á–µ—Ç—ã\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    await message.reply(help_text, parse_mode='Markdown')

@router.message(Command("format"))
async def format_command(message: Message):
    format_text = (
        "üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª–∞:*\n\n"
        "*COMPLETED —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:*\n"
        "- Completed\n"
        "- Payment Provider\n"
        "- Total Fee EUR\n"
        "- Reseller Fee EUR\n"
        "- Net Fee EUR\n"
        "- Name\n"
        "- Order\n\n"
        "*PAYD —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:*\n"
        "- Paid\n"
        "- Payment Method\n"
        "- Total Fee EUR\n"
        "- Name\n"
        "- Order"
    )
    await message.reply(format_text, parse_mode='Markdown')

@router.message(Command("info"))
async def info_command(message):
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–ø–∏–Ω–≥–æ–≤ PAYD
    payd_debit_mappings = "\n".join([f"    - {k}: {v}" for k, v in DEBIT_MAPPING_PAYD.items()])
    payd_credit_mappings = "\n".join([f"    - {k}: {v}" for k, v in CREDIT_MAPPING_PEYD.items()])
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–ø–∏–Ω–≥–æ–≤ COMPLETED
    completed_debit_mappings = "\n".join([f"    - {k}: {v}" for k, v in DEBIT_MAPPING_COMPLETED.items()])

    info_text = (
        "üìä <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≤–æ–¥–æ–∫ –≤ SAP</b>\n\n"
        "<b>PAYD —Ñ–∞–π–ª (–ø—Ä–æ—Å—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏):</b>\n"
        "‚Ä¢ –î–µ–±–µ—Ç = –ö—Ä–µ–¥–∏—Ç (Total Fee EUR)\n"
        "‚Ä¢ –°—á–µ—Ç–∞ –¥–µ–±–µ—Ç–∞:\n"
        f"{payd_debit_mappings}\n"
        "‚Ä¢ –°—á–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞:\n"
        f"{payd_credit_mappings}\n\n"
        
        "<b>COMPLETED —Ñ–∞–π–ª (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏):</b>\n"
        "‚Ä¢ –°—á–µ—Ç–∞ –¥–µ–±–µ—Ç–∞:\n"
        f"{completed_debit_mappings}\n\n"
        
        "1. –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞:\n"
        "‚Ä¢ –î–µ–±–µ—Ç: Total Fee EUR\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç1: Reseller Fee EUR (–∫–æ–º–∏—Å—Å–∏—è)\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç2: Net Fee EUR (—á–∏—Å—Ç–∞—è —Å—É–º–º–∞)\n\n"
        
        "<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞:</b>\n"
        "‚Ä¢ 207001 - Reseller Fee\n"
        "‚Ä¢ 420001 - Net Fee (wire_transfer)\n"
        "‚Ä¢ 420002 - Net Fee (CC/APM)\n"
        "‚Ä¢ 420003 - Additional Fee\n\n"
        
        "<b>–ü—Ä–∏–º–µ—Ä COMPLETED:</b>\n"
        "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 100 EUR:\n"
        "‚Ä¢ –î–µ–±–µ—Ç: 100 EUR (—Å—á–µ—Ç 210xxx)\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç1: 30 EUR (—Å—á–µ—Ç 207001) - –∫–æ–º–∏—Å—Å–∏—è\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç2: 70 EUR (—Å—á–µ—Ç 420xxx) - —á–∏—Å—Ç–∞—è —Å—É–º–º–∞\n\n"
        
        "–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ Additional Fee —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞:\n"
        "‚Ä¢ –î–µ–±–µ—Ç: —Å—É–º–º–∞ (—Å—á–µ—Ç –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É)\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç: —Å—É–º–º–∞ (—Å—á–µ—Ç 420003)"
    )

    await message.reply(info_text, parse_mode='HTML')

@router.message(F.document)
async def handle_file(message: Message, bot: Bot):
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs("temp", exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not message.document.file_name.endswith('.csv'):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        input_file = "temp/–∏—Å—Ö–æ–¥–Ω–∏–∫.csv"
        with open(input_file, 'wb') as new_file:
            new_file.write(downloaded_file.read())  # .read() –¥–ª—è BytesIO –æ–±—ä–µ–∫—Ç–∞

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        df = pd.read_csv(input_file)
        report_type = await determine_report_type(df)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        report_type_msg = "COMPLETED" if report_type == 'completed' else "PAYD"
        bot_message = await message.answer(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ç–∏–ø–∞: {report_type_msg}\n‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        bot_message_for_admin = await bot.send_message(ADMIN_ID, f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ç–∏–ø–∞: {report_type_msg}")

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        renamed_file = f"temp/–∏—Å—Ö–æ–¥–Ω–∏–∫ ({report_type_msg}).csv"
        os.rename(input_file, renamed_file)

        output_jdt = "temp/jdt.csv"
        output_ojdt = "temp/ojdt.csv"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        if report_type == 'completed':
            await process_completed_jdt(renamed_file, output_jdt)
            await process_completed_ojdt(renamed_file, output_ojdt)
        else:
            await process_payd_jdt(renamed_file, output_jdt)
            await process_payd_ojdt(renamed_file, output_ojdt)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await bot_message.edit_text(f"{report_type_msg}\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        await send_file_with_retry(message, output_jdt, "jdt.csv", bot)
        await send_file_with_retry(message, output_ojdt, "ojdt.csv", bot)
        await bot_message_for_admin.edit_text(f"{report_type_msg}\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n\n–î–ª—è: @{message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")

    except Exception as e:
        error_type = type(e).__name__
        error_msg = str(e)
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: \n—Ç–∏–ø –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
        if ADMIN_ID:
            try:
                await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {error_type}: {error_msg}")
            except Exception as admin_error:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_error}")
    finally:
        await clean_temp_directory(directory="temp")

async def send_file_with_retry(message, file_path, filename, bot, max_retries=3):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö."""
    for attempt in range(max_retries):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ñ–∞
            await bot.send_document(message.chat.id, FSInputFile(file_path, filename=filename))
            return True  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        except TelegramNetworkError as e:
            if attempt < max_retries - 1:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                retry_delay = 2 * (attempt + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
            else:
                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –û—à–∏–±–∫–∞ —Å–µ—Ç–∏.")
                if ADMIN_ID:
                    try:
                        await bot.send_message(ADMIN_ID, f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                return False
        except Exception as e:
            try:
                await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {type(e).__name__}: {str(e)}")
            except:
                pass
        return False

async def determine_report_type(df):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞."""
    df.columns = df.columns.str.strip()
    if 'Reseller Fee EUR' in df.columns or 'Reseller\nFee EUR' in df.columns:
        return 'completed'
    elif 'Paid' in df.columns:
        return 'payd'
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏.")